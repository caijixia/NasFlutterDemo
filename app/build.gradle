apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def buildConf = rootProject.ext.build_conf

def loadProperties(String filePath) {
    Properties properties = new Properties()
    File file = file(filePath)
    if (file.exists()) {
        file.withReader('utf-8') { reader ->
            properties.load(reader)
        }
    }
    return properties
}

def loadProguard(String dirPath){
    List<File> files = new ArrayList<>()
    File directory = file(dirPath)
    if (directory != null && directory.exists()) {
        directory.listFiles().each { it ->
            files.add(it)
        }
        return files.toArray()
    }
    return null
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {

        applicationId buildConf.package_name
        minSdkVersion buildConf.versions.min_sdk_version
        targetSdkVersion buildConf.versions.target_sdk_version
        versionCode buildConf.versions.version_code
        versionName buildConf.versions.version_name


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        debug {
            storeFile file('../keystore/debug.keystore')
        }
        release {
            // keystore
            storeFile file('../keystore/release.keystore')

            // keys
            Properties properties = loadProperties('../release.properties')
            storePassword properties.get('storepassword')
            keyAlias properties.get('keyalias')
            keyPassword properties.get('keypassword')
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles loadProguard('../proguard')
        }
    }

    flavorDimensions 'environment'

    productFlavors {
        dev {
            dimension 'environment'
        }
        pre {
            dimension 'environment'
        }
        online {
            dimension 'environment'
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation "com.google.android.material:material:1.3.0"

    implementation project(':nasFlutterSDK') //use project
    implementation 'com.kaopiz:kprogresshud:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.6'

//    implementation(name: 'nasFlutterSDK-debug', ext: 'aar') //use aar
//    implementation 'im.yixin.sdk.nas:nasFlutterSDK:0.0.2-alpha' //use remote gradle
}